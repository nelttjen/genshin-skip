package main

import (
	"fmt"
	"syscall"
	"time"
	"math/rand"
)

var (
	user32                = syscall.NewLazyDLL("user32.dll")
	kernel32              = syscall.NewLazyDLL("kernel32.dll")
	procGetAsyncKeyState  = user32.NewProc("GetAsyncKeyState")
	procKeybdEvent        = user32.NewProc("keybd_event")
	procSetConsoleCtrlHandler = kernel32.NewProc("SetConsoleCtrlHandler")

	running = false
)
var (
	procSetConsoleCP  = kernel32.NewProc("SetConsoleCP")
	procSetConsoleOutputCP = kernel32.NewProc("SetConsoleOutputCP")
)

func setConsoleUTF8() {
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –≤–≤–æ–¥–∞ –∏ –≤—ã–≤–æ–¥–∞ –≤ UTF-8 (–∫–æ–¥–∏—Ä–æ–≤–∫–∞ 65001)
	procSetConsoleCP.Call(65001)
	procSetConsoleOutputCP.Call(65001)
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–ª–∞–≤–∏—à
const (
	VK_F       = 0x46 // –ö–ª–∞–≤–∏—à–∞ "F"
	VK_MENU    = 0x12 // Alt
	VK_1       = 0x31
	VK_2       = 0x32
	KEYEVENTF_KEYUP = 0x02
)

func main() {
	setConsoleUTF8()
	fmt.Println("üëä –ñ–º–∏ Alt+1, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∫–ª–∏–∫–∞—Ç—å F, –∏ Alt+2, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å! üõ†Ô∏è")

	// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Ctrl+C
	setConsoleCtrlHandler()

	// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª–∞–≤–∏—à
	go func() {
		for {
			// –ü—Ä–æ–≤–µ—Ä–∫–∞ Alt+1
			if isKeyPressed(VK_MENU) && isKeyPressed(VK_1) {
				fmt.Println("üî• –ù–∞—á–∏–Ω–∞—é –∂–∞—Ç—å F")
				running = true
			}

			// –ü—Ä–æ–≤–µ—Ä–∫–∞ Alt+2
			if isKeyPressed(VK_MENU) && isKeyPressed(VK_2) {
				fmt.Println("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é!")
				running = false
			}

			time.Sleep(50 * time.Millisecond) // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
		}
	}()

	// –ì–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –∫–ª–∏–∫–æ–≤ F
	go func() {
		for {
			if running {
				pressKey(VK_F)
				// –†–∞–Ω–¥–æ–º–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç 42 –¥–æ 78 –º—Å
				delay := time.Duration(rand.Intn(37)+42) * time.Millisecond
				fmt.Printf("üéÆ –ö–ª–∏–∫–Ω—É–ª F, –∑–∞–¥–µ—Ä–∂–∫–∞ %d –º—Å\n", delay.Milliseconds())
				time.Sleep(delay)
			}
		}
	}()

	// –ë–ª–æ–∫–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫, —á—Ç–æ–±—ã –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å
	select {}
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏
func isKeyPressed(vkCode int) bool {
	ret, _, _ := procGetAsyncKeyState.Call(uintptr(vkCode))
	return ret&0x8000 != 0
}

// –ù–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à–∏
func pressKey(vkCode int) {
	procKeybdEvent.Call(uintptr(vkCode), 0, 0, 0)
	time.Sleep(10 * time.Millisecond)
	procKeybdEvent.Call(uintptr(vkCode), 0, KEYEVENTF_KEYUP, 0)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Ctrl+C
func setConsoleCtrlHandler() {
	handler := syscall.NewCallback(func(ctrlType uint) int {
		if ctrlType == 0 {
			fmt.Println("üö™ –í—ã—Ö–æ–¥ –ø–æ Ctrl+C")
			return 1
		}
		return 0
	})
	procSetConsoleCtrlHandler.Call(handler, 1)
}
